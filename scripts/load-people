#!/usr/bin/env perl

use strict;
use warnings;
use utf8;

# Loads JSON member files into TheyWorkForYou.
# The JSON files are stored in files here:
#       https://github.com/mysociety/parlparse/tree/master/members

use FindBin;
chdir $FindBin::Bin;
use lib "$FindBin::Bin";
use lib "$FindBin::Bin/../commonlib/perllib";

use mySociety::Config;
mySociety::Config::set_file("$FindBin::Bin/../conf/general");

use DBI;
use Encode;
use File::Slurp;
use Getopt::Long;
use JSON;
use POSIX qw(strftime);
use Data::Dumper;
use Unicode::Collate;

my %slug_to_house_id = (
    'crown' => 0,
    'house-of-commons' => 1,
    'house-of-lords' => 2,
    'northern-ireland-assembly' => 3,
    'scottish-parliament' => 4,
    'welsh-parliament' => 5,
    'london-assembly' => 6,
);

my $verbose;
my $from = '';
GetOptions ("verbose!" => \$verbose, "from=s" => \$from) or die $!;
my $start_time = time();
verbose("Start");
db_connect();

my $pwmembers = mySociety::Config::get('PWMEMBERS');
verbose("People and Constituencies");
load_people_json();
if (!$from) {
    verbose("Offices");
    load_moffices();
    check_member_ids();
}
verbose("End");

# ---

my ($dbh, $memberadd, $memberexist, $membercheck, $personinfoupdate, $nameadd, $nameupdate, $namefetch, $namedelete, $gradd, $grdelete, $start_transaction, $query_commit, );

sub db_connect {
    #DBI->trace(1);
    my $dsn = 'DBI:mysql:database=' . mySociety::Config::get('TWFY_DB_NAME'). ':host=' . mySociety::Config::get('TWFY_DB_HOST');
    $dbh = DBI->connect($dsn, mySociety::Config::get('TWFY_DB_USER'), mySociety::Config::get('TWFY_DB_PASS'), { RaiseError => 1, PrintError => 0, mysql_enable_utf8 => 1 });

    $memberadd = $dbh->prepare("replace into member (member_id, person_id, house,
        constituency, party, entered_house, left_house, entered_reason, left_reason)
        values (?, ?, ?, ?, ?, ?, ?, ?, ?)");
    $memberexist = $dbh->prepare("select member_id from member where member_id = ?");
    $membercheck = $dbh->prepare("select member_id from member where
        member_id = ? and person_id = ? and house = ?
        and constituency = ? and party = ? and entered_house = ? and left_house = ?
        and entered_reason = ? and left_reason = ?");

    $personinfoupdate = $dbh->prepare("insert into personinfo (person_id, data_key, data_value) values (?, ?, ?) on duplicate key update data_value=?");

    $nameadd = $dbh->prepare("insert into person_names (person_id, title, given_name,
        family_name, lordofname, start_date, end_date) values (?, ?, ?, ?, ?, ?, ?)");
    $nameupdate = $dbh->prepare("replace into person_names (id, person_id, title, given_name,
        family_name, lordofname, start_date, end_date) values (?, ?, ?, ?, ?, ?, ?, ?)");
    $namefetch = $dbh->prepare("select id from person_names where person_id = ? and end_date >= ? ORDER BY id");
    $namedelete = $dbh->prepare('delete from person_names where id=?');

    $gradd = $dbh->prepare("replace into gidredirect (gid_from, gid_to) values (?,?)");
    $grdelete = $dbh->prepare("delete from gidredirect where gid_from = ?");
}

my %organizations;
my %posts;

sub load_moffices {
    my $moffreplace = $dbh->prepare("replace into moffice (moffice_id, dept, position, from_date, to_date, person, source) values (?, ?, ?, ?, ?, ?, ?)");
    foreach ('ministers.json', 'ministers-2010.json') {
        my $j = decode_json(scalar read_file($pwmembers . $_));
        foreach (@{$j->{organizations}}) {
            $organizations{$_->{id}} = $_->{name};
        }
        foreach (@{$j->{memberships}}) {
            (my $person = $_->{person_id}) =~ s#uk.org.publicwhip/person/##;
            my $pos = $_->{role} || 'Member';
            my $dept = $organizations{$_->{organization_id}} || die $!;
            $dept = '' if $dept eq 'House of Commons';
            my $end_date = $_->{end_date} || '9999-12-31';
            next unless $end_date ge $from;
            $moffreplace->execute($_->{id}, $dept, $pos, $_->{start_date}, $end_date, $person, '');
        }
    }
}

sub load_constituencies {
    my $j = shift;
    my $constituencyadd = $dbh->prepare("replace into constituency (cons_id, name, main_name, from_date, to_date) values (?, ?, ?, ?, ?)");
    my $Collator = Unicode::Collate->new(normalization => undef, level => 1);
    foreach my $cons (@$j) {
        (my $consid = $cons->{id}) =~ s#uk.org.publicwhip/cons/##;

        my $start_date = $cons->{start_date};
        $start_date .= '-00-00' if length($start_date) == 4;
        my $end_date = $cons->{end_date} || '9999-12-31';
        $end_date = ($end_date+1) . '-00-00' if length($end_date) == 4;

        next unless $end_date ge $from;

        my $main_name = 1;
        my %seen;
        my @names = ($cons->{area}{name}, @{$cons->{area}{other_names} || []});
        foreach my $name (@names) {
            # need this because this table is using the latin_spanish_ci
            # collation and doesn't distinguish between Berwick-upon-Tweed and
            # Berwick-Upon-Tweed, or Ynys Mon with/without accent, and so you
            # end up setting main_name to 0 when it replaces the second of
            # these. This then breaks the constituency name search.
            next if $seen{$Collator->getSortKey($name)};
            $constituencyadd->execute(
                $consid,
                $name,
                $main_name,
                $start_date,
                $end_date,
            );
            $seen{$Collator->getSortKey($name)} = 1;
            $main_name = 0;
        }
    }
}

sub load_people_json {

    # disable autocommit to load multiple people and memberships at once
    $dbh->{AutoCommit} = 0;

    my $j = decode_json(scalar read_file($pwmembers . 'people.json'));

    if (!$from) {
        verbose("  Constituencies");
        load_constituencies($j->{posts});
    }

    verbose("  People");
    foreach (@{$j->{organizations}}) {
        $organizations{$_->{id}} = $_;
    }
    foreach (@{$j->{posts}}) {
        $posts{$_->{id}} = $_;
    }

    $dbh->commit();
    my %matched_person_ids;
    foreach (@{$j->{memberships}}) {
        next unless ($_->{start_date} || '') ge $from;
        $matched_person_ids{$_->{person_id}} = 1 if $from;
        if ($_->{redirect}) {
            $gradd->execute($_->{id}, $_->{redirect});
        } else {
            $grdelete->execute($_->{id});
            $_->{id} =$ s#uk.org.publicwhip/(member|lord|royal)/##;
            load_member($_);
        }
    }
    foreach (@{$j->{persons}}) {
        next if $from && !$matched_person_ids{$_->{id}};
        if ($_->{redirect}) {
            $gradd->execute($_->{id}, $_->{redirect});
        } else {
            $grdelete->execute($_->{id});
            $_->{id} =~ s#uk\.org\.publicwhip/person/##;
            load_identifiers($_);
            load_names($_);
        }
    }
    $dbh->commit();

    $dbh->{AutoCommit} = 1;

}

my %member_ids = ();

sub load_member {
    my ($member) = @_;

    my $id = $member->{id};
    (my $person_id = $member->{person_id}) =~ s#uk.org.publicwhip/person/##;

    $member_ids{$id} = 1;

    my $start_date = $member->{start_date} || '0000-00-00';
    $start_date .= '-00-00' if length($start_date) == 4;
    my $end_date = $member->{end_date} || '9999-12-31';
    $end_date = ($end_date+1) . '-00-00' if length($end_date) == 4;

    my $org_slug;
    if ($member->{post_id}) {
        $org_slug = $posts{$member->{post_id}}{organization_id};
    } else {
        $org_slug = $member->{organization_id};
    }

    my $constituency = '';
    if ($org_slug ne 'house-of-lords' && $org_slug ne 'crown') {
        $constituency = $posts{$member->{post_id}}{area}{name};
    }

    my $party = $member->{on_behalf_of_id} ? $organizations{$member->{on_behalf_of_id}}{name} : '';

    db_memberadd(
        $id,
        $person_id,
        $slug_to_house_id{$org_slug},
        $constituency,
        $party,
        $start_date, $end_date,
        $member->{start_reason} || '',
        $member->{end_reason} || ($end_date eq '9999-12-31' && $org_slug ne 'house-of-lords' ? 'still_in_office' : ''),
    );
}

sub load_identifiers {
    my $person = shift;

    my $id = $person->{id};
    foreach (@{$person->{identifiers}}) {
        $personinfoupdate->execute($id, $_->{scheme}, $_->{identifier}, $_->{identifier});
    }
}

sub load_names {
    my $person = shift;

    my $id = $person->{id};

    my @names;
    foreach my $name (@{$person->{other_names}}) {
        next unless $name->{note} eq 'Main';

        my $start_date = $name->{start_date} || '0000-00-00';
        $start_date .= '-00-00' if length($start_date) == 4;
        my $end_date = $name->{end_date} || '9999-12-31';
        $end_date = ($end_date+1) . '-00-00' if length($end_date) == 4;

        next unless $end_date ge $from;

        push @names, [
            $id,
            $name->{honorific_prefix} || '',
            $name->{given_name},
            $name->{lordname} // $name->{family_name},
            $name->{lordofname} // '',
            $start_date, $end_date,
        ];
    }

    return unless @names;

    $namefetch->execute($id, $from || '0000-00-00');
    while (my $row = $namefetch->fetchrow_arrayref) {
        if (@names) {
            $nameupdate->execute($row->[0], @{shift @names});
        } else {
            $namedelete->execute($row->[0]);
        }
    }
    while (@names) {
        $nameadd->execute(@{shift @names});
    }
}

sub db_memberadd {
    my $id = $_[0];
    my @params = @_;

    my $q = $memberexist->execute($id);
    die "More than one existing member of same id $id" if $q > 1;

    if ($q == 1) {
        # Member already exists, check they are the same
        $q = $membercheck->execute(@params);
        if ($q == 0) {
            print "Replacing existing member with new data for $id\n";
            print "This is for your information only, just check it looks OK.\n";
            print "\n";
            print Dumper(\@params);
            $memberadd->execute(@params);
        }
    } else {
        print "Adding new member with identifier $id\n";
        print "This is for your information only, just check it looks OK.\n";
        print "\n";
        print Dumper(\@params);
        $memberadd->execute(@params);
    }
}

sub check_member_ids {
    my $q = $dbh->prepare("select member_id from member");
    $q->execute();
    while (my @row = $q->fetchrow_array) {
            print "Member $row[0] in DB, not in JSON\n" if (!$member_ids{$row[0]});
    }
}

sub verbose {
    my $s = shift;
    return unless $verbose;
    my $duration = time() - $start_time;
    print "$duration $s\n";
}
