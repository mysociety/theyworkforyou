#!/usr/bin/env perl

use strict;
use warnings;

# Loads JSON member files into TheyWorkForYou.
# The JSON files are stored in files here:
#       https://github.com/mysociety/parlparse/tree/master/members

use FindBin;
chdir $FindBin::Bin;
use lib "$FindBin::Bin";
use lib "$FindBin::Bin/../commonlib/perllib";

use mySociety::Config;
mySociety::Config::set_file("$FindBin::Bin/../conf/general");

use DBI;
use Encode;
use File::Slurp;
use JSON;
use Data::Dumper;

my %slug_to_house_id = (
    'crown' => 0,
    'house-of-commons' => 1,
    'house-of-lords' => 2,
    'northern-ireland-assembly' => 3,
    'scottish-parliament' => 4,
);

db_connect();

my $pwmembers = mySociety::Config::get('PWMEMBERS');
load_constituencies();
load_people_json();
loadmoffices();
check_member_ids();

# ---

my ($dbh, $memberadd, $memberexist, $membercheck);

sub db_connect {
    #DBI->trace(1);
    my $dsn = 'DBI:mysql:database=' . mySociety::Config::get('TWFY_DB_NAME'). ':host=' . mySociety::Config::get('TWFY_DB_HOST');
    $dbh = DBI->connect($dsn, mySociety::Config::get('TWFY_DB_USER'), mySociety::Config::get('TWFY_DB_PASS'), { RaiseError => 1, PrintError => 0 });

    $memberadd = $dbh->prepare("replace into member (member_id, person_id, house, title, first_name, last_name,
        constituency, party, entered_house, left_house, entered_reason, left_reason)
        values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    $memberexist = $dbh->prepare("select member_id from member where member_id = ?");
    $membercheck = $dbh->prepare("select member_id from member where
        member_id = ? and person_id = ? and house = ? and title = ? and first_name = ? and last_name = ?
        and constituency = ? and party = ? and entered_house = ? and left_house = ?
        and entered_reason = ? and left_reason = ?");
}

my %organizations;
my %posts;

sub load_moffices {
    my $moffreplace = $dbh->prepare("replace into moffice (moffice_id, dept, position, from_date, to_date, person, source) values (?, ?, ?, ?, ?, ?, ?)");
    foreach ('ministers.json', 'ministers-2010.json') {
        my $j = decode_json(read_file($pwmembers . $_));
        foreach (@{$j->{organizations}}) {
            $organizations{$_->{id}} = $_->{name};
        }
        foreach (@{$j->{memberships}}) {
            (my $person = $_->{person_id}) =~ s#uk.org.publicwhip/person/##;
            my $pos = $_->{role} || 'Member';
            my $dept = $organizations{$_->{organization_id}} || die $!;
            $dept = '' if $dept eq 'House of Commons';
            $moffreplace->execute($_->{id}, $dept, $pos, $_->{start_date}, $_->{end_date}, $person, '');
        }
    }
}

sub load_constituencies {
    my $constituencyadd = $dbh->prepare("replace into constituency (cons_id, name, main_name, from_date, to_date) values (?, ?, ?, ?, ?)");
    my $j = decode_json(read_file($pwmembers . 'constituencies.json'));
    foreach my $cons (@$j) {
        (my $consid = $cons->{id}) =~ s#uk.org.publicwhip/cons/##;

        my $start_date = $cons->{start_date};
        $start_date .= '-00-00' if length($start_date) == 4;
        my $end_date = $cons->{end_date} || '9999-12-31';
        $end_date .= '-00-00' if length($end_date) == 4;

        my $main_name = 1;
        foreach my $name (@{$cons->{names}}) {
            $constituencyadd->execute(
                $consid,
                Encode::encode('iso-8859-1', $name),
                $main_name,
                $start_date,
                $end_date,
            );
            $main_name = 0;
        }
    }
}

sub load_people_json {
    my $j = decode_json(read_file($pwmembers . 'people.json'));
    foreach (@{$j->{organizations}}) {
        $organizations{$_->{id}} = $_;
    }
    foreach (@{$j->{posts}}) {
        $posts{$_->{id}} = $_;
    }
    foreach (@{$j->{memberships}}) {
        load_member($_);
    }
}

my %member_ids = ();

sub load_member {
    my ($member) = @_;

    (my $id = $member->{id}) =~ s:uk.org.publicwhip/(member|lord|royal)/::;
    (my $person_id = $member->{person_id}) =~ s#uk.org.publicwhip/person/##;

    my $start_date = $member->{start_date} || '0000-00-00';
    $start_date .= '-00-00' if length($start_date) == 4;
    my $end_date = $member->{end_date} || '9999-12-31';
    $end_date .= '-00-00' if length($end_date) == 4;

    my $org_slug;
    if ($member->{post_id}) {
        $org_slug = $posts{$member->{post_id}}{organization_id};
    } else {
        $org_slug = $member->{organization_id};
    }
    my $last_name_field = $org_slug eq 'house-of-lords' ? 'lordname' : 'family_name';
    my $constituency = '';
    if ($org_slug eq 'house-of-lords') {
        $constituency = $member->{name}{lordofname};
    } elsif ($org_slug ne 'crown') {
        $constituency = $posts{$member->{post_id}}{area}{name};
    }

    my $party = $member->{on_behalf_of_id} ? $organizations{$member->{on_behalf_of_id}}{name} : '';

    db_memberadd(
        $id,
        $person_id,
        $slug_to_house_id{$org_slug},
        $member->{name}{honorific_prefix} || '',
        $member->{name}{given_name},
        $member->{name}{$last_name_field},
        $constituency,
        $party,
        $start_date, $end_date,
        $member->{start_reason} || '',
        $member->{end_reason} || ($end_date eq '9999-12-31' && $org_slug ne 'house-of-lords' ? 'still_in_office' : ''),
    );

    $member_ids{$id} = 1;
    return $person_id;
}

sub db_memberadd {
    my $id = $_[0];
    my @params = @_;

    my $q = $memberexist->execute($id);
    die "More than one existing member of same id $id" if $q > 1;

    for (4..7) {
        $params[$_] = Encode::encode('iso-8859-1', $params[$_]);
    }

    if ($q == 1) {
        # Member already exists, check they are the same
        $q = $membercheck->execute(@params);
        if ($q == 0) {
            print "Replacing existing member with new data for $id\n";
            print "This is for your information only, just check it looks OK.\n";
            print "\n";
            print Dumper(\@params);
            $memberadd->execute(@params);
        }
    } else {
        print "Adding new member with identifier $id\n";
        print "This is for your information only, just check it looks OK.\n";
        print "\n";
        print Dumper(\@params);
        $memberadd->execute(@params);
    }
}

sub check_member_ids {
    my $q = $dbh->prepare("select member_id from member");
    $q->execute();
    while (my @row = $q->fetchrow_array) {
            print "Member $row[0] in DB, not in JSON\n" if (!$member_ids{$row[0]});
    }
}
