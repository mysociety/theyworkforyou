#!/usr/bin/env perl

use strict;
use warnings;

# Loads XML member files into TheyWorkForYou.
# The XML files are stored in (semi-)manually updated files here:
#       https://github.com/mysociety/parlparse/tree/master/members

use FindBin;
chdir $FindBin::Bin;
use lib "$FindBin::Bin";
use lib "$FindBin::Bin/../commonlib/perllib";

use mySociety::Config;
mySociety::Config::set_file("$FindBin::Bin/../conf/general");

use DBI;
use File::Slurp;
use JSON;
use XML::Twig;
use Data::Dumper;

my %slug_to_house_id = (
    'crown' => 0,
    'house-of-commons' => 1,
    'house-of-lords' => 2,
    'northern-ireland-assembly' => 3,
    'scottish-parliament' => 4,
);

db_connect();

my $pwmembers = mySociety::Config::get('PWMEMBERS');
my $twig = XML::Twig->new(twig_handlers => {
    'constituency' => \&loadconstituency,
});
$twig->parsefile($pwmembers . "constituencies.xml");
load_people_json();
loadmoffices();
check_member_ids();

# ---

my ($dbh, $constituencyadd, $memberadd, $memberexist, $membercheck);

sub db_connect {
    #DBI->trace(1);
    my $dsn = 'DBI:mysql:database=' . mySociety::Config::get('TWFY_DB_NAME'). ':host=' . mySociety::Config::get('TWFY_DB_HOST');
    $dbh = DBI->connect($dsn, mySociety::Config::get('TWFY_DB_USER'), mySociety::Config::get('TWFY_DB_PASS'), { RaiseError => 1, PrintError => 0 });

    $constituencyadd = $dbh->prepare("replace into constituency (cons_id, name, main_name, from_date, to_date) values (?, ?, ?, ?, ?)");
    $memberadd = $dbh->prepare("replace into member (member_id, person_id, house, title, first_name, last_name,
        constituency, party, entered_house, left_house, entered_reason, left_reason)
        values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    $memberexist = $dbh->prepare("select member_id from member where member_id = ?");
    $membercheck = $dbh->prepare("select member_id from member where
        member_id = ? and person_id = ? and house = ? and title = ? and first_name = ? and last_name = ?
        and constituency = ? and party = ? and entered_house = ? and left_house = ?
        and entered_reason = ? and left_reason = ?");
}

my %organizations;
my %posts;

sub loadmoffices {
    my @moffices;

    foreach ('ministers.json', 'ministers-2010.json') {
        my $j = decode_json(read_file($pwmembers . $_));
        foreach (@{$j->{organizations}}) {
            $organizations{$_->{id}} = $_->{name};
        }
        foreach (@{$j->{memberships}}) {
            push @moffices, loadmoffice($_);
        }
    }

    # XXX: Surely the XML should join two consecutive offices together somewhere?!
    # Also, have to check all previous offices as offices are not consecutive in XML. <sigh>
    @moffices = sort { $a->[3] cmp $b->[3] } @moffices;
    for (my $i=0; $i<@moffices; $i++) {
        for (my $j=0; $j<$i; $j++) {
            next unless $moffices[$j];
            if ($moffices[$i][5] eq $moffices[$j][5] && $moffices[$i][1] eq $moffices[$j][1]
                && $moffices[$i][2] eq $moffices[$j][2] && $moffices[$i][3] eq $moffices[$j][4]) {
                $moffices[$j][4] = $moffices[$i][4];
                delete $moffices[$i];
                last;
            }
        }
    }
    $dbh->do("delete from moffice");
    foreach my $row (@moffices) {
        next unless $row;
        my $sth = $dbh->do("insert into moffice (dept, position, from_date, to_date, person, source) values (?, ?, ?, ?, ?, ?)", {},
        $row->[1], $row->[2], $row->[3], $row->[4], $row->[5], $row->[6]);
    }
}

sub loadmoffice {
    my $moff = shift;

    (my $mofficeid = $moff->{id}) =~ s#uk.org.publicwhip/moffice/##;
    (my $person = $moff->{person_id}) =~ s#uk.org.publicwhip/person/##;
    my $pos = $moff->{role} || 'Member';
    my $dept = $organizations{$moff->{organization_id}} || die $!;
    $dept = '' if $dept eq 'House of Commons';

    return [ $mofficeid, $dept, $pos, $moff->{start_date}, $moff->{end_date}, $person, '' ];
}

sub loadconstituency {
    my ($twig, $cons) = @_;

    my $consid = $cons->att('id');
    $consid =~ s#uk.org.publicwhip/cons/##;

    my $fromdate = $cons->att('fromdate');
    $fromdate .= '-00-00' if length($fromdate) == 4;
    my $todate = $cons->att('todate');
    $todate .= '-00-00' if length($todate) == 4;

    my $main_name = 1;
    for (my $name = $cons->first_child('name'); $name; $name = $name->next_sibling('name')) {
        $constituencyadd->execute(
            $consid,
            Encode::encode('iso-8859-1', $name->att('text')),
            $main_name,
            $fromdate,
            $todate,
        );
        $main_name = 0;
    }
    $twig->purge;
}

sub load_people_json {
    my $j = decode_json(read_file($pwmembers . 'people.json'));
    foreach (@{$j->{organizations}}) {
        $organizations{$_->{id}} = $_;
    }
    foreach (@{$j->{posts}}) {
        $posts{$_->{id}} = $_;
    }
    foreach (@{$j->{memberships}}) {
        load_member($_);
    }
}

my %member_ids = ();

sub load_member {
    my ($member) = @_;

    (my $id = $member->{id}) =~ s:uk.org.publicwhip/(member|lord|royal)/::;
    (my $person_id = $member->{person_id}) =~ s#uk.org.publicwhip/person/##;

    my $start_date = $member->{start_date} || '0000-00-00';
    $start_date .= '-00-00' if length($start_date) == 4;
    my $end_date = $member->{end_date} || '9999-12-31';
    $end_date .= '-00-00' if length($end_date) == 4;

    my $org_slug;
    if ($member->{post_id}) {
        $org_slug = $posts{$member->{post_id}}{organization_id};
    } else {
        $org_slug = $member->{organization_id};
    }
    my $last_name_field = $org_slug eq 'house-of-lords' ? 'lordname' : 'family_name';
    my $constituency = '';
    if ($org_slug eq 'house-of-lords') {
        $constituency = $member->{name}{lordofname};
    } elsif ($org_slug ne 'crown') {
        $constituency = $posts{$member->{post_id}}{area}{name};
    }

    my $party = $member->{on_behalf_of_id} ? $organizations{$member->{on_behalf_of_id}}{name} : '';

    db_memberadd(
        $id,
        $person_id,
        $slug_to_house_id{$org_slug},
        $member->{name}{honorific_prefix} || '',
        $member->{name}{given_name},
        $member->{name}{$last_name_field},
        $constituency,
        $party,
        $start_date, $end_date,
        $member->{start_reason} || '',
        $member->{end_reason} || ($end_date eq '9999-12-31' && $org_slug ne 'house-of-lords' ? 'still_in_office' : ''),
    );

    $member_ids{$id} = 1;
    return $person_id;
}

sub db_memberadd {
    my $id = $_[0];
    my @params = @_;

    my $q = $memberexist->execute($id);
    die "More than one existing member of same id $id" if $q > 1;

    for (4..7) {
        $params[$_] = Encode::encode('iso-8859-1', $params[$_]);
    }

    if ($q == 1) {
        # Member already exists, check they are the same
        $q = $membercheck->execute(@params);
        if ($q == 0) {
            print "Replacing existing member with new data for $id\n";
            print "This is for your information only, just check it looks OK.\n";
            print "\n";
            print Dumper(\@params);
            $memberadd->execute(@params);
        }
    } else {
        print "Adding new member with identifier $id\n";
        print "This is for your information only, just check it looks OK.\n";
        print "\n";
        print Dumper(\@params);
        $memberadd->execute(@params);
    }
}

sub check_member_ids {
    my $q = $dbh->prepare("select member_id from member");
    $q->execute();
    while (my @row = $q->fetchrow_array) {
            print "Member $row[0] in DB, not in XML\n" if (!$member_ids{$row[0]});
    }
}
