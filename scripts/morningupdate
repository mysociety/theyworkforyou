#!/usr/bin/perl
# morningupdate.  Called when new data is available from ukparse.

# Call with VERBOSE=true set in the environment for diagnostic messages:
# VERBOSE=true ./morningupdate

use warnings;
use strict;
use FindBin;
use lib "$FindBin::Bin/../commonlib/perllib";
use mySociety::Config;
mySociety::Config::set_file("$FindBin::Bin/../conf/general");

my $path = mySociety::Config::get('BASEDIR') . '/../../..';
my $staging = mySociety::Config::get('DEVSITE');

my $verbose = 0;
$verbose = 1 if $ENV{VERBOSE};

my $cronquiet = '--cronquiet';
$cronquiet = '' if $verbose;

# Make sure only one copy runs at once
unless ($ENV{LOCKFILE}) {
        system "/usr/local/bin/run-with-lockfile -n $path/morning-update.lock $0";
        if ($? >> 8 == 100) {
                print "Another copy of morningupdate or compactsearchdb is already running\n"
        }
        exit $? >> 8;
}

#print "Start time: ";
#date +"%Y-%m-%d %H:%M:%S %Z"

# Load recent new files from XML into the database
print "Loading into database\n" if $verbose;
chdir $FindBin::Bin;
# We do these on separate lines, so if one fails, others still run
system "./load-people";
system "./xml2db.pl $cronquiet --recent --debates --quiet";
system "./xml2db.pl $cronquiet --recent --westminhall --quiet";
system "./xml2db.pl $cronquiet --recent --wrans --quiet";
system "./xml2db.pl $cronquiet --recent --wms --quiet";
system "./xml2db.pl $cronquiet --recent --lordsdebates --quiet";
system "./xml2db.pl $cronquiet --recent --wales --quiet --force";
system "./xml2db.pl $cronquiet --recent --ni --quiet";
system "./xml2db.pl $cronquiet --recent --scotland --quiet";
system "./xml2db.pl $cronquiet --recent --scotwrans --quiet";
system "./xml2db.pl $cronquiet --recent --scotqs --quiet";
system "./xml2db.pl $cronquiet --recent --standing --quiet";
system "./xml2db.pl $cronquiet --recent --lmqs --quiet";
system "../.venv/bin/python future-fetch.py";

# Update division names from Parliament
print "Updating division names\n" if $verbose;
system "../.venv/bin/python division_io.py update-from-commons-votes" . ($verbose ? " --verbose" : "");

# Export divisions to parquet
print "Exporting divisions to parquet\n" if $verbose;
system "../.venv/bin/python division_io.py export-division-data" . ($verbose ? " --verbose" : "");

$cronquiet = substr($cronquiet, 2) if $cronquiet;

## Xapian Stuff.
# If there's a value for XAPIAN_MAX_CHANGESETS in the config file,
# make sure it's in our environment.
my $changesets = mySociety::Config::get('XAPIAN_MAX_CHANGESETS');
$ENV{XAPIAN_MAX_CHANGESETS} = $changesets if $changesets;

# Update xapian index
print "Xapian indexing\n" if $verbose;
chdir "$FindBin::Bin/../search";
system "./index.pl sincefile $cronquiet";

# Create new RSS files.
if ($verbose) {
    print "Running rssgenerate\n";
    system "$path/theyworkforyou/scripts/rssgenerate";
} else {
    # Fork off a child process
    my $pid = fork;
    if (not defined $pid) {
        die "Fork failed";
    } elsif ($pid == 0) {
        # Child
        exec "$path/theyworkforyou/scripts/rssgenerate";
    } else {
        # Parent
    }
}

#print "Whole thing done time: ";
#date +"%Y-%m-%d %H:%M:%S"
